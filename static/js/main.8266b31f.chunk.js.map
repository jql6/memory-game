{"version":3,"sources":["components/appHeader.js","components/appCard.js","components/outcomeScreen.js","cardDict.js","myFunctions.js","components/cardsDisplay.js","App.js","index.js"],"names":["AppHeader","props","className","href","currentScoreValue","highScoreValue","AppCard","cardText","cardSuit","split","slice","cardClass","classifyCardColor","onClick","clickFunction","cardSymbol","OutcomeScreen","console","log","lose","id","style","display","win","resetFunction","cardDict","sampleArray","arr","n","length","result","Array","len","taken","RangeError","x","Math","floor","random","CardsDisplay","useState","cardPool","cardList","setCardList","clickedCards","setClickedCards","loseState","setLoseState","winState","setWinState","cheat","handleCardClick","e","score","cardName","target","parentElement","querySelector","textContent","includes","currentScoreFunction","newClickedCards","nonClickedCards","filter","card","highScoreFunction","shuffledCardList","possible","forEach","sampledIndex","Object","keys","sampledValidCard","useEffect","map","App","currentScore","setCurrentScore","highScore","setHighScore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8266b31f.chunk.js","sourcesContent":["// appHeader.js\nimport React from \"react\";\n\nfunction AppHeader(props) {\n  return (\n    <header className=\"App-header\">\n      <h1>Card memory game</h1>\n      <p>\n        <a href=\"https://github.com/jql6/memory-game\">Link to the repository</a>{\" \"}\n        | <a href=\"https://jql6.github.io/\">Return to homepage</a>\n      </p>\n      <p>\n        Current Score: {props.currentScoreValue} | High score:{\" \"}\n        {props.highScoreValue}\n      </p>\n    </header>\n  );\n}\n\nexport default AppHeader;\n","// appCard.js\nimport \"./appCard.css\";\nimport React from \"react\";\n\nfunction AppCard(props) {\n  const classifyCardColor = (cardText) => {\n    const cardWords = cardText.split(\" \");\n    const cardSuit = cardWords.slice(-1)[0];\n    let cardClass = \"card\";\n\n    if ((cardSuit == \"Spades\") | (cardSuit == \"Clubs\")) {\n      cardClass = \"black card\";\n    } else if ((cardSuit == \"Hearts\") | (cardSuit == \"Diamonds\")) {\n      cardClass = \"red card\";\n    } else {\n      throw `Error, '${cardSuit}' in '${cardText}' is not a suit!`;\n    }\n\n    return cardClass;\n  };\n\n  return (\n    <div className=\"app-card\">\n      <div className=\"card-background\">\n        <p\n          className={classifyCardColor(props.cardText)}\n          onClick={props.clickFunction}\n        >\n          {props.cardSymbol}\n        </p>\n      </div>\n      <p className=\"card-text\">{props.cardText}</p>\n    </div>\n  );\n}\n\nexport default AppCard;\n","// outcomeScreen.js\nimport \"./outcomeScreen.css\";\nimport React from \"react\";\n\nfunction OutcomeScreen(props) {\n  console.log(props.lose);\n  return (\n    <div\n      id=\"lose-screen\"\n      style={{ display: props.lose | props.win ? \"block\" : \"none\" }}\n      onClick={props.resetFunction}\n    >\n      <h1>\n        {props.win ? \"You win!\" : props.lose ? \"You lose!\" : \"Game in progress\"}\n      </h1>\n      <p>Click to reset</p>\n    </div>\n  );\n}\n\nexport default OutcomeScreen;\n","// cardDict.js\n\nconst cardDict = {\n  \"Ace of Spades\": \"🂡\",\n  \"Two of Spades\": \"🂢\",\n  \"Three of Spades\": \"🂣\",\n  \"Four of Spades\": \"🂤\",\n  \"Five of Spades\": \"🂥\",\n  \"Six of Spades\": \"🂦\",\n  \"Seven of Spades\": \"🂧\",\n  \"Eight of Spades\": \"🂨\",\n  \"Nine of Spades\": \"🂩\",\n  \"Ten of Spades\": \"🂪\",\n  \"Jack of Spades\": \"🂫\",\n  \"Queen of Spades\": \"🂭\",\n  \"King of Spades\": \"🂮\",\n\n  \"Ace of Hearts\": \"🂱\",\n  \"Two of Hearts\": \"🂲\",\n  \"Three of Hearts\": \"🂳\",\n  \"Four of Hearts\": \"🂴\",\n  \"Five of Hearts\": \"🂵\",\n  \"Six of Hearts\": \"🂶\",\n  \"Seven of Hearts\": \"🂷\",\n  \"Eight of Hearts\": \"🂸\",\n  \"Nine of Hearts\": \"🂹\",\n  \"Ten of Hearts\": \"🂺\",\n  \"Jack of Hearts\": \"🂻\",\n  \"Queen of Hearts\": \"🂽\",\n  \"King of Hearts\": \"🂾\",\n\n  \"Ace of Clubs\": \"🃑\",\n  \"Two of Clubs\": \"🃒\",\n  \"Three of Clubs\": \"🃓\",\n  \"Four of Clubs\": \"🃔\",\n  \"Five of Clubs\": \"🃕\",\n  \"Six of Clubs\": \"🃖\",\n  \"Seven of Clubs\": \"🃗\",\n  \"Eight of Clubs\": \"🃘\",\n  \"Nine of Clubs\": \"🃙\",\n  \"Ten of Clubs\": \"🃚\",\n  \"Jack of Clubs\": \"🃛\",\n  \"Queen of Clubs\": \"🃝\",\n  \"King of Clubs\": \"🃞\",\n\n  \"Ace of Diamonds\": \"🃁\",\n  \"Two of Diamonds\": \"🃂\",\n  \"Three of Diamonds\": \"🃃\",\n  \"Four of Diamonds\": \"🃄\",\n  \"Five of Diamonds\": \"🃅\",\n  \"Six of Diamonds\": \"🃆\",\n  \"Seven of Diamonds\": \"🃇\",\n  \"Eight of Diamonds\": \"🃈\",\n  \"Nine of Diamonds\": \"🃉\",\n  \"Ten of Diamonds\": \"🃊\",\n  \"Jack of Diamonds\": \"🃋\",\n  \"Queen of Diamonds\": \"🃍\",\n  \"King of Diamonds\": \"🃎\",\n};\n\nexport default cardDict;\n","// myFunctions.js\n\n/**\n * Function by Bergi\n * https://stackoverflow.com/a/19270021\n */\nfunction sampleArray(arr, n = arr.length) {\n  let result = new Array(n),\n    len = arr.length,\n    taken = new Array(len);\n  if (n > len)\n    throw new RangeError(\"getRandom: more elements taken than available\");\n  while (n--) {\n    let x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n\nexport default sampleArray;\n","// cardsDisplay.js\nimport \"./cardsDisplay.css\";\nimport React, { useState, useEffect } from \"react\";\nimport AppCard from \"./appCard\";\nimport OutcomeScreen from \"./outcomeScreen\";\nimport cardDict from \"../cardDict\";\nimport sampleArray from \"../myFunctions\";\n\nfunction CardsDisplay(props) {\n  // Create a card list\n  const [cardPool] = useState([\n    \"Ace of Spades\",\n    \"Two of Spades\",\n    \"Three of Spades\",\n    \"Four of Spades\",\n    \"Five of Spades\",\n    \"Six of Spades\",\n    \"Seven of Spades\",\n    \"Eight of Spades\",\n    \"Nine of Spades\",\n    \"Ten of Spades\",\n    \"Jack of Spades\",\n    \"Queen of Spades\",\n    \"King of Spades\",\n    \"Ace of Hearts\",\n    \"Two of Hearts\",\n    \"Three of Hearts\",\n    \"Four of Hearts\",\n    \"Five of Hearts\",\n    \"Six of Hearts\",\n    \"Seven of Hearts\",\n    \"Eight of Hearts\",\n    \"Nine of Hearts\",\n    \"Ten of Hearts\",\n    \"Jack of Hearts\",\n    \"Queen of Hearts\",\n    \"King of Hearts\",\n  ]);\n\n  const [cardList, setCardList] = useState(sampleArray(cardPool, 6));\n\n  const [clickedCards, setClickedCards] = useState([]);\n\n  const [loseState, setLoseState] = useState(false);\n\n  const [winState, setWinState] = useState(false);\n  // Cheat mode for debugging (you get to see clicked cards)\n  const [cheat] = useState(false);\n\n  // Function used to update score values for parent component\n  const checkHighScore = (score) => {\n    // If the current score is higher than high score, update high score\n    if (props.highScoreValue < score) {\n      props.highScoreFunction(score);\n    }\n  };\n\n  const handleCardClick = (e) => {\n    // Name of the card that was clicked\n    const cardName =\n      e.target.parentElement.parentElement.querySelector(\n        \".card-text\"\n      ).textContent;\n    // Check if card has been clicked\n    if (clickedCards.includes(cardName)) {\n      setLoseState(true);\n      // Reset scores\n      props.currentScoreFunction(0);\n    } else {\n      const newClickedCards = [...clickedCards, cardName];\n      setClickedCards(newClickedCards);\n      const nonClickedCards = cardPool.filter(\n        (card) => !newClickedCards.includes(card)\n      );\n      // Update scores\n      props.currentScoreFunction(props.currentScoreValue + 1);\n      checkHighScore(props.currentScoreValue + 1);\n\n      // Generate a valid, shuffled card list\n      let shuffledCardList = sampleArray(cardPool, cardList.length);\n      // Check that the shuffled card list is valid\n      let possible = false;\n      // If there is a non clicked card, then it's possible to guess correctly\n      shuffledCardList.forEach((card) => {\n        if (nonClickedCards.includes(card)) {\n          possible = true;\n        }\n        // Could use cardPool.filter((card) => !clickedCards.includes(card))\n        // if state is lagging behind\n      });\n\n      if (!possible) {\n        // Choose a random index in card list\n        let sampledIndex = sampleArray(Object.keys(cardList), 1);\n        // Choose a card from nonclicked cards\n        // This should always be possible because the else is handled in\n        // the useEffects portion to display win screen\n        if (nonClickedCards.length == 0) {\n          setWinState(true);\n          // Exit if win\n          return;\n        } else {\n          let sampledValidCard = sampleArray(nonClickedCards, 1)[0];\n          shuffledCardList = [\n            ...shuffledCardList.slice(0, sampledIndex),\n            sampledValidCard,\n            ...shuffledCardList.slice(sampledIndex + 1),\n          ];\n        }\n      }\n      // Shuffle the card list\n      setCardList(shuffledCardList);\n    }\n  };\n\n  // componentDidUpdate\n  useEffect(() => {\n    // Display lose screen if state is losing\n    if (loseState) {\n      // Display lose screen\n      // Lose screen should trigger reset when clicking outside of box or\n      // something\n    } else if (winState) {\n      // Show win screen\n    } else {\n      // Make a shuffled card list\n      // Display clicked cards\n    }\n  });\n\n  const resetGame = () => {\n    // Reset lose state\n    setLoseState(false);\n    setWinState(false);\n    // Reset cardList and clickedCards\n    setClickedCards([]);\n    // Shuffle the cards and reset cardList\n    setCardList(sampleArray(cardPool, cardList.length));\n  };\n\n  return (\n    <div className=\"cards-display\">\n      <OutcomeScreen\n        lose={loseState}\n        win={winState}\n        resetFunction={resetGame}\n      />\n      <div className=\"card-list\">\n        {cardList.map((cardName) => {\n          return (\n            <AppCard\n              key={cardName}\n              cardSymbol={cardDict[cardName]}\n              cardText={cardName}\n              clickFunction={handleCardClick}\n            />\n          );\n        })}\n      </div>\n      <div\n        className=\"clicked-cards card-list\"\n        style={{ display: cheat ? \"grid\" : \"none\" }}\n      >\n        {clickedCards.map((cardName) => {\n          return (\n            <AppCard\n              key={`clicked-${cardName}`}\n              cardSymbol={cardDict[cardName]}\n              cardText={cardName}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default CardsDisplay;\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport AppHeader from \"./components/appHeader\";\nimport CardsDisplay from \"./components/cardsDisplay\";\n\nfunction App() {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <AppHeader currentScoreValue={currentScore} highScoreValue={highScore} />\n      <CardsDisplay\n        currentScoreFunction={setCurrentScore}\n        currentScoreValue={currentScore}\n        highScoreFunction={setHighScore}\n        highScoreValue={highScore}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}